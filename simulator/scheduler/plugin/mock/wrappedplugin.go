// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/kube-scheduler-simulator/simulator/scheduler/plugin (interfaces: Store,PreFilterPluginExtender,FilterPluginExtender,PostFilterPluginExtender,PreScorePluginExtender,ScorePluginExtender,NormalizeScorePluginExtender,ReservePluginExtender,PermitPluginExtender,PreBindPluginExtender,BindPluginExtender,PostBindPluginExtender)
//
// Generated by this command:
//
//	mockgen -destination=./mock/wrappedplugin.go -package=plugin . Store,PreFilterPluginExtender,FilterPluginExtender,PostFilterPluginExtender,PreScorePluginExtender,ScorePluginExtender,NormalizeScorePluginExtender,ReservePluginExtender,PermitPluginExtender,PreBindPluginExtender,BindPluginExtender,PostBindPluginExtender
//

// Package plugin is a generated GoMock package.
package plugin

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
	framework "k8s.io/kubernetes/pkg/scheduler/framework"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddBindResult mocks base method.
func (m *MockStore) AddBindResult(namespace, podName, pluginName, status string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBindResult", namespace, podName, pluginName, status)
}

// AddBindResult indicates an expected call of AddBindResult.
func (mr *MockStoreMockRecorder) AddBindResult(namespace, podName, pluginName, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBindResult", reflect.TypeOf((*MockStore)(nil).AddBindResult), namespace, podName, pluginName, status)
}

// AddCustomResult mocks base method.
func (m *MockStore) AddCustomResult(namespace, podName, annotationKey, result string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCustomResult", namespace, podName, annotationKey, result)
}

// AddCustomResult indicates an expected call of AddCustomResult.
func (mr *MockStoreMockRecorder) AddCustomResult(namespace, podName, annotationKey, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCustomResult", reflect.TypeOf((*MockStore)(nil).AddCustomResult), namespace, podName, annotationKey, result)
}

// AddFilterResult mocks base method.
func (m *MockStore) AddFilterResult(namespace, podName, nodeName, pluginName, reason string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFilterResult", namespace, podName, nodeName, pluginName, reason)
}

// AddFilterResult indicates an expected call of AddFilterResult.
func (mr *MockStoreMockRecorder) AddFilterResult(namespace, podName, nodeName, pluginName, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilterResult", reflect.TypeOf((*MockStore)(nil).AddFilterResult), namespace, podName, nodeName, pluginName, reason)
}

// AddNormalizedScoreResult mocks base method.
func (m *MockStore) AddNormalizedScoreResult(namespace, podName, nodeName, pluginName string, normalizedscore int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddNormalizedScoreResult", namespace, podName, nodeName, pluginName, normalizedscore)
}

// AddNormalizedScoreResult indicates an expected call of AddNormalizedScoreResult.
func (mr *MockStoreMockRecorder) AddNormalizedScoreResult(namespace, podName, nodeName, pluginName, normalizedscore any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNormalizedScoreResult", reflect.TypeOf((*MockStore)(nil).AddNormalizedScoreResult), namespace, podName, nodeName, pluginName, normalizedscore)
}

// AddPermitResult mocks base method.
func (m *MockStore) AddPermitResult(namespace, podName, pluginName, status string, timeout time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPermitResult", namespace, podName, pluginName, status, timeout)
}

// AddPermitResult indicates an expected call of AddPermitResult.
func (mr *MockStoreMockRecorder) AddPermitResult(namespace, podName, pluginName, status, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermitResult", reflect.TypeOf((*MockStore)(nil).AddPermitResult), namespace, podName, pluginName, status, timeout)
}

// AddPostFilterResult mocks base method.
func (m *MockStore) AddPostFilterResult(namespace, podName, nominatedNodeName, pluginName string, nodeNames []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPostFilterResult", namespace, podName, nominatedNodeName, pluginName, nodeNames)
}

// AddPostFilterResult indicates an expected call of AddPostFilterResult.
func (mr *MockStoreMockRecorder) AddPostFilterResult(namespace, podName, nominatedNodeName, pluginName, nodeNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPostFilterResult", reflect.TypeOf((*MockStore)(nil).AddPostFilterResult), namespace, podName, nominatedNodeName, pluginName, nodeNames)
}

// AddPreBindResult mocks base method.
func (m *MockStore) AddPreBindResult(namespace, podName, pluginName, status string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPreBindResult", namespace, podName, pluginName, status)
}

// AddPreBindResult indicates an expected call of AddPreBindResult.
func (mr *MockStoreMockRecorder) AddPreBindResult(namespace, podName, pluginName, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPreBindResult", reflect.TypeOf((*MockStore)(nil).AddPreBindResult), namespace, podName, pluginName, status)
}

// AddPreFilterResult mocks base method.
func (m *MockStore) AddPreFilterResult(namespace, podName, pluginName, reason string, preFilterResult *framework.PreFilterResult) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPreFilterResult", namespace, podName, pluginName, reason, preFilterResult)
}

// AddPreFilterResult indicates an expected call of AddPreFilterResult.
func (mr *MockStoreMockRecorder) AddPreFilterResult(namespace, podName, pluginName, reason, preFilterResult any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPreFilterResult", reflect.TypeOf((*MockStore)(nil).AddPreFilterResult), namespace, podName, pluginName, reason, preFilterResult)
}

// AddPreScoreResult mocks base method.
func (m *MockStore) AddPreScoreResult(namespace, podName, pluginName, reason string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPreScoreResult", namespace, podName, pluginName, reason)
}

// AddPreScoreResult indicates an expected call of AddPreScoreResult.
func (mr *MockStoreMockRecorder) AddPreScoreResult(namespace, podName, pluginName, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPreScoreResult", reflect.TypeOf((*MockStore)(nil).AddPreScoreResult), namespace, podName, pluginName, reason)
}

// AddReserveResult mocks base method.
func (m *MockStore) AddReserveResult(namespace, podName, pluginName, status string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddReserveResult", namespace, podName, pluginName, status)
}

// AddReserveResult indicates an expected call of AddReserveResult.
func (mr *MockStoreMockRecorder) AddReserveResult(namespace, podName, pluginName, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReserveResult", reflect.TypeOf((*MockStore)(nil).AddReserveResult), namespace, podName, pluginName, status)
}

// AddScoreResult mocks base method.
func (m *MockStore) AddScoreResult(namespace, podName, nodeName, pluginName string, score int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddScoreResult", namespace, podName, nodeName, pluginName, score)
}

// AddScoreResult indicates an expected call of AddScoreResult.
func (mr *MockStoreMockRecorder) AddScoreResult(namespace, podName, nodeName, pluginName, score any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddScoreResult", reflect.TypeOf((*MockStore)(nil).AddScoreResult), namespace, podName, nodeName, pluginName, score)
}

// AddSelectedNode mocks base method.
func (m *MockStore) AddSelectedNode(namespace, podName, nodeName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSelectedNode", namespace, podName, nodeName)
}

// AddSelectedNode indicates an expected call of AddSelectedNode.
func (mr *MockStoreMockRecorder) AddSelectedNode(namespace, podName, nodeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSelectedNode", reflect.TypeOf((*MockStore)(nil).AddSelectedNode), namespace, podName, nodeName)
}

// MockPreFilterPluginExtender is a mock of PreFilterPluginExtender interface.
type MockPreFilterPluginExtender struct {
	ctrl     *gomock.Controller
	recorder *MockPreFilterPluginExtenderMockRecorder
	isgomock struct{}
}

// MockPreFilterPluginExtenderMockRecorder is the mock recorder for MockPreFilterPluginExtender.
type MockPreFilterPluginExtenderMockRecorder struct {
	mock *MockPreFilterPluginExtender
}

// NewMockPreFilterPluginExtender creates a new mock instance.
func NewMockPreFilterPluginExtender(ctrl *gomock.Controller) *MockPreFilterPluginExtender {
	mock := &MockPreFilterPluginExtender{ctrl: ctrl}
	mock.recorder = &MockPreFilterPluginExtenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPreFilterPluginExtender) EXPECT() *MockPreFilterPluginExtenderMockRecorder {
	return m.recorder
}

// AfterPreFilter mocks base method.
func (m *MockPreFilterPluginExtender) AfterPreFilter(ctx context.Context, state *framework.CycleState, pod *v1.Pod, preFilterResult *framework.PreFilterResult, preFilterStatus *framework.Status) (*framework.PreFilterResult, *framework.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterPreFilter", ctx, state, pod, preFilterResult, preFilterStatus)
	ret0, _ := ret[0].(*framework.PreFilterResult)
	ret1, _ := ret[1].(*framework.Status)
	return ret0, ret1
}

// AfterPreFilter indicates an expected call of AfterPreFilter.
func (mr *MockPreFilterPluginExtenderMockRecorder) AfterPreFilter(ctx, state, pod, preFilterResult, preFilterStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterPreFilter", reflect.TypeOf((*MockPreFilterPluginExtender)(nil).AfterPreFilter), ctx, state, pod, preFilterResult, preFilterStatus)
}

// BeforePreFilter mocks base method.
func (m *MockPreFilterPluginExtender) BeforePreFilter(ctx context.Context, state *framework.CycleState, pod *v1.Pod) (*framework.PreFilterResult, *framework.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforePreFilter", ctx, state, pod)
	ret0, _ := ret[0].(*framework.PreFilterResult)
	ret1, _ := ret[1].(*framework.Status)
	return ret0, ret1
}

// BeforePreFilter indicates an expected call of BeforePreFilter.
func (mr *MockPreFilterPluginExtenderMockRecorder) BeforePreFilter(ctx, state, pod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforePreFilter", reflect.TypeOf((*MockPreFilterPluginExtender)(nil).BeforePreFilter), ctx, state, pod)
}

// MockFilterPluginExtender is a mock of FilterPluginExtender interface.
type MockFilterPluginExtender struct {
	ctrl     *gomock.Controller
	recorder *MockFilterPluginExtenderMockRecorder
	isgomock struct{}
}

// MockFilterPluginExtenderMockRecorder is the mock recorder for MockFilterPluginExtender.
type MockFilterPluginExtenderMockRecorder struct {
	mock *MockFilterPluginExtender
}

// NewMockFilterPluginExtender creates a new mock instance.
func NewMockFilterPluginExtender(ctrl *gomock.Controller) *MockFilterPluginExtender {
	mock := &MockFilterPluginExtender{ctrl: ctrl}
	mock.recorder = &MockFilterPluginExtenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilterPluginExtender) EXPECT() *MockFilterPluginExtenderMockRecorder {
	return m.recorder
}

// AfterFilter mocks base method.
func (m *MockFilterPluginExtender) AfterFilter(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodeInfo *framework.NodeInfo, filterResult *framework.Status) *framework.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterFilter", ctx, state, pod, nodeInfo, filterResult)
	ret0, _ := ret[0].(*framework.Status)
	return ret0
}

// AfterFilter indicates an expected call of AfterFilter.
func (mr *MockFilterPluginExtenderMockRecorder) AfterFilter(ctx, state, pod, nodeInfo, filterResult any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterFilter", reflect.TypeOf((*MockFilterPluginExtender)(nil).AfterFilter), ctx, state, pod, nodeInfo, filterResult)
}

// BeforeFilter mocks base method.
func (m *MockFilterPluginExtender) BeforeFilter(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodeInfo *framework.NodeInfo) *framework.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeFilter", ctx, state, pod, nodeInfo)
	ret0, _ := ret[0].(*framework.Status)
	return ret0
}

// BeforeFilter indicates an expected call of BeforeFilter.
func (mr *MockFilterPluginExtenderMockRecorder) BeforeFilter(ctx, state, pod, nodeInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeFilter", reflect.TypeOf((*MockFilterPluginExtender)(nil).BeforeFilter), ctx, state, pod, nodeInfo)
}

// MockPostFilterPluginExtender is a mock of PostFilterPluginExtender interface.
type MockPostFilterPluginExtender struct {
	ctrl     *gomock.Controller
	recorder *MockPostFilterPluginExtenderMockRecorder
	isgomock struct{}
}

// MockPostFilterPluginExtenderMockRecorder is the mock recorder for MockPostFilterPluginExtender.
type MockPostFilterPluginExtenderMockRecorder struct {
	mock *MockPostFilterPluginExtender
}

// NewMockPostFilterPluginExtender creates a new mock instance.
func NewMockPostFilterPluginExtender(ctrl *gomock.Controller) *MockPostFilterPluginExtender {
	mock := &MockPostFilterPluginExtender{ctrl: ctrl}
	mock.recorder = &MockPostFilterPluginExtenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostFilterPluginExtender) EXPECT() *MockPostFilterPluginExtenderMockRecorder {
	return m.recorder
}

// AfterPostFilter mocks base method.
func (m *MockPostFilterPluginExtender) AfterPostFilter(ctx context.Context, state *framework.CycleState, pod *v1.Pod, filteredNodeStatusMap framework.NodeToStatusReader, postFilterResult *framework.PostFilterResult, status *framework.Status) (*framework.PostFilterResult, *framework.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterPostFilter", ctx, state, pod, filteredNodeStatusMap, postFilterResult, status)
	ret0, _ := ret[0].(*framework.PostFilterResult)
	ret1, _ := ret[1].(*framework.Status)
	return ret0, ret1
}

// AfterPostFilter indicates an expected call of AfterPostFilter.
func (mr *MockPostFilterPluginExtenderMockRecorder) AfterPostFilter(ctx, state, pod, filteredNodeStatusMap, postFilterResult, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterPostFilter", reflect.TypeOf((*MockPostFilterPluginExtender)(nil).AfterPostFilter), ctx, state, pod, filteredNodeStatusMap, postFilterResult, status)
}

// BeforePostFilter mocks base method.
func (m *MockPostFilterPluginExtender) BeforePostFilter(ctx context.Context, state *framework.CycleState, pod *v1.Pod, filteredNodeStatusMap framework.NodeToStatusReader) (*framework.PostFilterResult, *framework.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforePostFilter", ctx, state, pod, filteredNodeStatusMap)
	ret0, _ := ret[0].(*framework.PostFilterResult)
	ret1, _ := ret[1].(*framework.Status)
	return ret0, ret1
}

// BeforePostFilter indicates an expected call of BeforePostFilter.
func (mr *MockPostFilterPluginExtenderMockRecorder) BeforePostFilter(ctx, state, pod, filteredNodeStatusMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforePostFilter", reflect.TypeOf((*MockPostFilterPluginExtender)(nil).BeforePostFilter), ctx, state, pod, filteredNodeStatusMap)
}

// MockPreScorePluginExtender is a mock of PreScorePluginExtender interface.
type MockPreScorePluginExtender struct {
	ctrl     *gomock.Controller
	recorder *MockPreScorePluginExtenderMockRecorder
	isgomock struct{}
}

// MockPreScorePluginExtenderMockRecorder is the mock recorder for MockPreScorePluginExtender.
type MockPreScorePluginExtenderMockRecorder struct {
	mock *MockPreScorePluginExtender
}

// NewMockPreScorePluginExtender creates a new mock instance.
func NewMockPreScorePluginExtender(ctrl *gomock.Controller) *MockPreScorePluginExtender {
	mock := &MockPreScorePluginExtender{ctrl: ctrl}
	mock.recorder = &MockPreScorePluginExtenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPreScorePluginExtender) EXPECT() *MockPreScorePluginExtenderMockRecorder {
	return m.recorder
}

// AfterPreScore mocks base method.
func (m *MockPreScorePluginExtender) AfterPreScore(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodes []*framework.NodeInfo, preScoreStatus *framework.Status) *framework.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterPreScore", ctx, state, pod, nodes, preScoreStatus)
	ret0, _ := ret[0].(*framework.Status)
	return ret0
}

// AfterPreScore indicates an expected call of AfterPreScore.
func (mr *MockPreScorePluginExtenderMockRecorder) AfterPreScore(ctx, state, pod, nodes, preScoreStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterPreScore", reflect.TypeOf((*MockPreScorePluginExtender)(nil).AfterPreScore), ctx, state, pod, nodes, preScoreStatus)
}

// BeforePreScore mocks base method.
func (m *MockPreScorePluginExtender) BeforePreScore(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodes []*framework.NodeInfo) *framework.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforePreScore", ctx, state, pod, nodes)
	ret0, _ := ret[0].(*framework.Status)
	return ret0
}

// BeforePreScore indicates an expected call of BeforePreScore.
func (mr *MockPreScorePluginExtenderMockRecorder) BeforePreScore(ctx, state, pod, nodes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforePreScore", reflect.TypeOf((*MockPreScorePluginExtender)(nil).BeforePreScore), ctx, state, pod, nodes)
}

// MockScorePluginExtender is a mock of ScorePluginExtender interface.
type MockScorePluginExtender struct {
	ctrl     *gomock.Controller
	recorder *MockScorePluginExtenderMockRecorder
	isgomock struct{}
}

// MockScorePluginExtenderMockRecorder is the mock recorder for MockScorePluginExtender.
type MockScorePluginExtenderMockRecorder struct {
	mock *MockScorePluginExtender
}

// NewMockScorePluginExtender creates a new mock instance.
func NewMockScorePluginExtender(ctrl *gomock.Controller) *MockScorePluginExtender {
	mock := &MockScorePluginExtender{ctrl: ctrl}
	mock.recorder = &MockScorePluginExtenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScorePluginExtender) EXPECT() *MockScorePluginExtenderMockRecorder {
	return m.recorder
}

// AfterScore mocks base method.
func (m *MockScorePluginExtender) AfterScore(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodeName string, score int64, scoreResult *framework.Status) (int64, *framework.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterScore", ctx, state, pod, nodeName, score, scoreResult)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*framework.Status)
	return ret0, ret1
}

// AfterScore indicates an expected call of AfterScore.
func (mr *MockScorePluginExtenderMockRecorder) AfterScore(ctx, state, pod, nodeName, score, scoreResult any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterScore", reflect.TypeOf((*MockScorePluginExtender)(nil).AfterScore), ctx, state, pod, nodeName, score, scoreResult)
}

// BeforeScore mocks base method.
func (m *MockScorePluginExtender) BeforeScore(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodeName string) (int64, *framework.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeScore", ctx, state, pod, nodeName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*framework.Status)
	return ret0, ret1
}

// BeforeScore indicates an expected call of BeforeScore.
func (mr *MockScorePluginExtenderMockRecorder) BeforeScore(ctx, state, pod, nodeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeScore", reflect.TypeOf((*MockScorePluginExtender)(nil).BeforeScore), ctx, state, pod, nodeName)
}

// MockNormalizeScorePluginExtender is a mock of NormalizeScorePluginExtender interface.
type MockNormalizeScorePluginExtender struct {
	ctrl     *gomock.Controller
	recorder *MockNormalizeScorePluginExtenderMockRecorder
	isgomock struct{}
}

// MockNormalizeScorePluginExtenderMockRecorder is the mock recorder for MockNormalizeScorePluginExtender.
type MockNormalizeScorePluginExtenderMockRecorder struct {
	mock *MockNormalizeScorePluginExtender
}

// NewMockNormalizeScorePluginExtender creates a new mock instance.
func NewMockNormalizeScorePluginExtender(ctrl *gomock.Controller) *MockNormalizeScorePluginExtender {
	mock := &MockNormalizeScorePluginExtender{ctrl: ctrl}
	mock.recorder = &MockNormalizeScorePluginExtenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNormalizeScorePluginExtender) EXPECT() *MockNormalizeScorePluginExtenderMockRecorder {
	return m.recorder
}

// AfterNormalizeScore mocks base method.
func (m *MockNormalizeScorePluginExtender) AfterNormalizeScore(ctx context.Context, state *framework.CycleState, pod *v1.Pod, scores framework.NodeScoreList, normalizeScoreResult *framework.Status) *framework.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterNormalizeScore", ctx, state, pod, scores, normalizeScoreResult)
	ret0, _ := ret[0].(*framework.Status)
	return ret0
}

// AfterNormalizeScore indicates an expected call of AfterNormalizeScore.
func (mr *MockNormalizeScorePluginExtenderMockRecorder) AfterNormalizeScore(ctx, state, pod, scores, normalizeScoreResult any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterNormalizeScore", reflect.TypeOf((*MockNormalizeScorePluginExtender)(nil).AfterNormalizeScore), ctx, state, pod, scores, normalizeScoreResult)
}

// BeforeNormalizeScore mocks base method.
func (m *MockNormalizeScorePluginExtender) BeforeNormalizeScore(ctx context.Context, state *framework.CycleState, pod *v1.Pod, scores framework.NodeScoreList) *framework.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeNormalizeScore", ctx, state, pod, scores)
	ret0, _ := ret[0].(*framework.Status)
	return ret0
}

// BeforeNormalizeScore indicates an expected call of BeforeNormalizeScore.
func (mr *MockNormalizeScorePluginExtenderMockRecorder) BeforeNormalizeScore(ctx, state, pod, scores any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeNormalizeScore", reflect.TypeOf((*MockNormalizeScorePluginExtender)(nil).BeforeNormalizeScore), ctx, state, pod, scores)
}

// MockReservePluginExtender is a mock of ReservePluginExtender interface.
type MockReservePluginExtender struct {
	ctrl     *gomock.Controller
	recorder *MockReservePluginExtenderMockRecorder
	isgomock struct{}
}

// MockReservePluginExtenderMockRecorder is the mock recorder for MockReservePluginExtender.
type MockReservePluginExtenderMockRecorder struct {
	mock *MockReservePluginExtender
}

// NewMockReservePluginExtender creates a new mock instance.
func NewMockReservePluginExtender(ctrl *gomock.Controller) *MockReservePluginExtender {
	mock := &MockReservePluginExtender{ctrl: ctrl}
	mock.recorder = &MockReservePluginExtenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservePluginExtender) EXPECT() *MockReservePluginExtenderMockRecorder {
	return m.recorder
}

// AfterReserve mocks base method.
func (m *MockReservePluginExtender) AfterReserve(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodename string, reserveStatus *framework.Status) *framework.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterReserve", ctx, state, pod, nodename, reserveStatus)
	ret0, _ := ret[0].(*framework.Status)
	return ret0
}

// AfterReserve indicates an expected call of AfterReserve.
func (mr *MockReservePluginExtenderMockRecorder) AfterReserve(ctx, state, pod, nodename, reserveStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterReserve", reflect.TypeOf((*MockReservePluginExtender)(nil).AfterReserve), ctx, state, pod, nodename, reserveStatus)
}

// AfterUnreserve mocks base method.
func (m *MockReservePluginExtender) AfterUnreserve(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodename string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterUnreserve", ctx, state, pod, nodename)
}

// AfterUnreserve indicates an expected call of AfterUnreserve.
func (mr *MockReservePluginExtenderMockRecorder) AfterUnreserve(ctx, state, pod, nodename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterUnreserve", reflect.TypeOf((*MockReservePluginExtender)(nil).AfterUnreserve), ctx, state, pod, nodename)
}

// BeforeReserve mocks base method.
func (m *MockReservePluginExtender) BeforeReserve(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodename string) *framework.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeReserve", ctx, state, pod, nodename)
	ret0, _ := ret[0].(*framework.Status)
	return ret0
}

// BeforeReserve indicates an expected call of BeforeReserve.
func (mr *MockReservePluginExtenderMockRecorder) BeforeReserve(ctx, state, pod, nodename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeReserve", reflect.TypeOf((*MockReservePluginExtender)(nil).BeforeReserve), ctx, state, pod, nodename)
}

// BeforeUnreserve mocks base method.
func (m *MockReservePluginExtender) BeforeUnreserve(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodename string) *framework.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeUnreserve", ctx, state, pod, nodename)
	ret0, _ := ret[0].(*framework.Status)
	return ret0
}

// BeforeUnreserve indicates an expected call of BeforeUnreserve.
func (mr *MockReservePluginExtenderMockRecorder) BeforeUnreserve(ctx, state, pod, nodename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeUnreserve", reflect.TypeOf((*MockReservePluginExtender)(nil).BeforeUnreserve), ctx, state, pod, nodename)
}

// MockPermitPluginExtender is a mock of PermitPluginExtender interface.
type MockPermitPluginExtender struct {
	ctrl     *gomock.Controller
	recorder *MockPermitPluginExtenderMockRecorder
	isgomock struct{}
}

// MockPermitPluginExtenderMockRecorder is the mock recorder for MockPermitPluginExtender.
type MockPermitPluginExtenderMockRecorder struct {
	mock *MockPermitPluginExtender
}

// NewMockPermitPluginExtender creates a new mock instance.
func NewMockPermitPluginExtender(ctrl *gomock.Controller) *MockPermitPluginExtender {
	mock := &MockPermitPluginExtender{ctrl: ctrl}
	mock.recorder = &MockPermitPluginExtenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermitPluginExtender) EXPECT() *MockPermitPluginExtenderMockRecorder {
	return m.recorder
}

// AfterPermit mocks base method.
func (m *MockPermitPluginExtender) AfterPermit(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodeName string, permitResult *framework.Status, timeout time.Duration) (*framework.Status, time.Duration) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterPermit", ctx, state, pod, nodeName, permitResult, timeout)
	ret0, _ := ret[0].(*framework.Status)
	ret1, _ := ret[1].(time.Duration)
	return ret0, ret1
}

// AfterPermit indicates an expected call of AfterPermit.
func (mr *MockPermitPluginExtenderMockRecorder) AfterPermit(ctx, state, pod, nodeName, permitResult, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterPermit", reflect.TypeOf((*MockPermitPluginExtender)(nil).AfterPermit), ctx, state, pod, nodeName, permitResult, timeout)
}

// BeforePermit mocks base method.
func (m *MockPermitPluginExtender) BeforePermit(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodeName string) (*framework.Status, time.Duration) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforePermit", ctx, state, pod, nodeName)
	ret0, _ := ret[0].(*framework.Status)
	ret1, _ := ret[1].(time.Duration)
	return ret0, ret1
}

// BeforePermit indicates an expected call of BeforePermit.
func (mr *MockPermitPluginExtenderMockRecorder) BeforePermit(ctx, state, pod, nodeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforePermit", reflect.TypeOf((*MockPermitPluginExtender)(nil).BeforePermit), ctx, state, pod, nodeName)
}

// MockPreBindPluginExtender is a mock of PreBindPluginExtender interface.
type MockPreBindPluginExtender struct {
	ctrl     *gomock.Controller
	recorder *MockPreBindPluginExtenderMockRecorder
	isgomock struct{}
}

// MockPreBindPluginExtenderMockRecorder is the mock recorder for MockPreBindPluginExtender.
type MockPreBindPluginExtenderMockRecorder struct {
	mock *MockPreBindPluginExtender
}

// NewMockPreBindPluginExtender creates a new mock instance.
func NewMockPreBindPluginExtender(ctrl *gomock.Controller) *MockPreBindPluginExtender {
	mock := &MockPreBindPluginExtender{ctrl: ctrl}
	mock.recorder = &MockPreBindPluginExtenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPreBindPluginExtender) EXPECT() *MockPreBindPluginExtenderMockRecorder {
	return m.recorder
}

// AfterPreBind mocks base method.
func (m *MockPreBindPluginExtender) AfterPreBind(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodename string, bindResult *framework.Status) *framework.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterPreBind", ctx, state, pod, nodename, bindResult)
	ret0, _ := ret[0].(*framework.Status)
	return ret0
}

// AfterPreBind indicates an expected call of AfterPreBind.
func (mr *MockPreBindPluginExtenderMockRecorder) AfterPreBind(ctx, state, pod, nodename, bindResult any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterPreBind", reflect.TypeOf((*MockPreBindPluginExtender)(nil).AfterPreBind), ctx, state, pod, nodename, bindResult)
}

// BeforePreBind mocks base method.
func (m *MockPreBindPluginExtender) BeforePreBind(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodename string) *framework.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforePreBind", ctx, state, pod, nodename)
	ret0, _ := ret[0].(*framework.Status)
	return ret0
}

// BeforePreBind indicates an expected call of BeforePreBind.
func (mr *MockPreBindPluginExtenderMockRecorder) BeforePreBind(ctx, state, pod, nodename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforePreBind", reflect.TypeOf((*MockPreBindPluginExtender)(nil).BeforePreBind), ctx, state, pod, nodename)
}

// MockBindPluginExtender is a mock of BindPluginExtender interface.
type MockBindPluginExtender struct {
	ctrl     *gomock.Controller
	recorder *MockBindPluginExtenderMockRecorder
	isgomock struct{}
}

// MockBindPluginExtenderMockRecorder is the mock recorder for MockBindPluginExtender.
type MockBindPluginExtenderMockRecorder struct {
	mock *MockBindPluginExtender
}

// NewMockBindPluginExtender creates a new mock instance.
func NewMockBindPluginExtender(ctrl *gomock.Controller) *MockBindPluginExtender {
	mock := &MockBindPluginExtender{ctrl: ctrl}
	mock.recorder = &MockBindPluginExtenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBindPluginExtender) EXPECT() *MockBindPluginExtenderMockRecorder {
	return m.recorder
}

// AfterBind mocks base method.
func (m *MockBindPluginExtender) AfterBind(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodename string, bindResult *framework.Status) *framework.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterBind", ctx, state, pod, nodename, bindResult)
	ret0, _ := ret[0].(*framework.Status)
	return ret0
}

// AfterBind indicates an expected call of AfterBind.
func (mr *MockBindPluginExtenderMockRecorder) AfterBind(ctx, state, pod, nodename, bindResult any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterBind", reflect.TypeOf((*MockBindPluginExtender)(nil).AfterBind), ctx, state, pod, nodename, bindResult)
}

// BeforeBind mocks base method.
func (m *MockBindPluginExtender) BeforeBind(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodename string) *framework.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeBind", ctx, state, pod, nodename)
	ret0, _ := ret[0].(*framework.Status)
	return ret0
}

// BeforeBind indicates an expected call of BeforeBind.
func (mr *MockBindPluginExtenderMockRecorder) BeforeBind(ctx, state, pod, nodename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeBind", reflect.TypeOf((*MockBindPluginExtender)(nil).BeforeBind), ctx, state, pod, nodename)
}

// MockPostBindPluginExtender is a mock of PostBindPluginExtender interface.
type MockPostBindPluginExtender struct {
	ctrl     *gomock.Controller
	recorder *MockPostBindPluginExtenderMockRecorder
	isgomock struct{}
}

// MockPostBindPluginExtenderMockRecorder is the mock recorder for MockPostBindPluginExtender.
type MockPostBindPluginExtenderMockRecorder struct {
	mock *MockPostBindPluginExtender
}

// NewMockPostBindPluginExtender creates a new mock instance.
func NewMockPostBindPluginExtender(ctrl *gomock.Controller) *MockPostBindPluginExtender {
	mock := &MockPostBindPluginExtender{ctrl: ctrl}
	mock.recorder = &MockPostBindPluginExtenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostBindPluginExtender) EXPECT() *MockPostBindPluginExtenderMockRecorder {
	return m.recorder
}

// AfterPostBind mocks base method.
func (m *MockPostBindPluginExtender) AfterPostBind(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodename string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterPostBind", ctx, state, pod, nodename)
}

// AfterPostBind indicates an expected call of AfterPostBind.
func (mr *MockPostBindPluginExtenderMockRecorder) AfterPostBind(ctx, state, pod, nodename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterPostBind", reflect.TypeOf((*MockPostBindPluginExtender)(nil).AfterPostBind), ctx, state, pod, nodename)
}

// BeforePostBind mocks base method.
func (m *MockPostBindPluginExtender) BeforePostBind(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodename string) *framework.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforePostBind", ctx, state, pod, nodename)
	ret0, _ := ret[0].(*framework.Status)
	return ret0
}

// BeforePostBind indicates an expected call of BeforePostBind.
func (mr *MockPostBindPluginExtenderMockRecorder) BeforePostBind(ctx, state, pod, nodename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforePostBind", reflect.TypeOf((*MockPostBindPluginExtender)(nil).BeforePostBind), ctx, state, pod, nodename)
}
