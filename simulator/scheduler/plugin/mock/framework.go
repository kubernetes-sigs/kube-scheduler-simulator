// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/kubernetes/pkg/scheduler/framework (interfaces: PreFilterPlugin,FilterPlugin,PostFilterPlugin,PreScorePlugin,ScorePlugin,ScoreExtensions,PermitPlugin,BindPlugin,PreBindPlugin,PostBindPlugin,ReservePlugin)

// Package plugin is a generated GoMock package.
package plugin

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	framework "k8s.io/kubernetes/pkg/scheduler/framework"
)

// MockPreFilterPlugin is a mock of PreFilterPlugin interface.
type MockPreFilterPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPreFilterPluginMockRecorder
}

// MockPreFilterPluginMockRecorder is the mock recorder for MockPreFilterPlugin.
type MockPreFilterPluginMockRecorder struct {
	mock *MockPreFilterPlugin
}

// NewMockPreFilterPlugin creates a new mock instance.
func NewMockPreFilterPlugin(ctrl *gomock.Controller) *MockPreFilterPlugin {
	mock := &MockPreFilterPlugin{ctrl: ctrl}
	mock.recorder = &MockPreFilterPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPreFilterPlugin) EXPECT() *MockPreFilterPluginMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockPreFilterPlugin) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockPreFilterPluginMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPreFilterPlugin)(nil).Name))
}

// PreFilter mocks base method.
func (m *MockPreFilterPlugin) PreFilter(arg0 context.Context, arg1 *framework.CycleState, arg2 *v1.Pod) (*framework.PreFilterResult, *framework.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreFilter", arg0, arg1, arg2)
	ret0, _ := ret[0].(*framework.PreFilterResult)
	ret1, _ := ret[1].(*framework.Status)
	return ret0, ret1
}

// PreFilter indicates an expected call of PreFilter.
func (mr *MockPreFilterPluginMockRecorder) PreFilter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreFilter", reflect.TypeOf((*MockPreFilterPlugin)(nil).PreFilter), arg0, arg1, arg2)
}

// PreFilterExtensions mocks base method.
func (m *MockPreFilterPlugin) PreFilterExtensions() framework.PreFilterExtensions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreFilterExtensions")
	ret0, _ := ret[0].(framework.PreFilterExtensions)
	return ret0
}

// PreFilterExtensions indicates an expected call of PreFilterExtensions.
func (mr *MockPreFilterPluginMockRecorder) PreFilterExtensions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreFilterExtensions", reflect.TypeOf((*MockPreFilterPlugin)(nil).PreFilterExtensions))
}

// MockFilterPlugin is a mock of FilterPlugin interface.
type MockFilterPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockFilterPluginMockRecorder
}

// MockFilterPluginMockRecorder is the mock recorder for MockFilterPlugin.
type MockFilterPluginMockRecorder struct {
	mock *MockFilterPlugin
}

// NewMockFilterPlugin creates a new mock instance.
func NewMockFilterPlugin(ctrl *gomock.Controller) *MockFilterPlugin {
	mock := &MockFilterPlugin{ctrl: ctrl}
	mock.recorder = &MockFilterPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilterPlugin) EXPECT() *MockFilterPluginMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *MockFilterPlugin) Filter(arg0 context.Context, arg1 *framework.CycleState, arg2 *v1.Pod, arg3 *framework.NodeInfo) *framework.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*framework.Status)
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockFilterPluginMockRecorder) Filter(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockFilterPlugin)(nil).Filter), arg0, arg1, arg2, arg3)
}

// Name mocks base method.
func (m *MockFilterPlugin) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockFilterPluginMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFilterPlugin)(nil).Name))
}

// MockPostFilterPlugin is a mock of PostFilterPlugin interface.
type MockPostFilterPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPostFilterPluginMockRecorder
}

// MockPostFilterPluginMockRecorder is the mock recorder for MockPostFilterPlugin.
type MockPostFilterPluginMockRecorder struct {
	mock *MockPostFilterPlugin
}

// NewMockPostFilterPlugin creates a new mock instance.
func NewMockPostFilterPlugin(ctrl *gomock.Controller) *MockPostFilterPlugin {
	mock := &MockPostFilterPlugin{ctrl: ctrl}
	mock.recorder = &MockPostFilterPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostFilterPlugin) EXPECT() *MockPostFilterPluginMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockPostFilterPlugin) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockPostFilterPluginMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPostFilterPlugin)(nil).Name))
}

// PostFilter mocks base method.
func (m *MockPostFilterPlugin) PostFilter(arg0 context.Context, arg1 *framework.CycleState, arg2 *v1.Pod, arg3 framework.NodeToStatusMap) (*framework.PostFilterResult, *framework.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostFilter", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*framework.PostFilterResult)
	ret1, _ := ret[1].(*framework.Status)
	return ret0, ret1
}

// PostFilter indicates an expected call of PostFilter.
func (mr *MockPostFilterPluginMockRecorder) PostFilter(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostFilter", reflect.TypeOf((*MockPostFilterPlugin)(nil).PostFilter), arg0, arg1, arg2, arg3)
}

// MockPreScorePlugin is a mock of PreScorePlugin interface.
type MockPreScorePlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPreScorePluginMockRecorder
}

// MockPreScorePluginMockRecorder is the mock recorder for MockPreScorePlugin.
type MockPreScorePluginMockRecorder struct {
	mock *MockPreScorePlugin
}

// NewMockPreScorePlugin creates a new mock instance.
func NewMockPreScorePlugin(ctrl *gomock.Controller) *MockPreScorePlugin {
	mock := &MockPreScorePlugin{ctrl: ctrl}
	mock.recorder = &MockPreScorePluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPreScorePlugin) EXPECT() *MockPreScorePluginMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockPreScorePlugin) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockPreScorePluginMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPreScorePlugin)(nil).Name))
}

// PreScore mocks base method.
func (m *MockPreScorePlugin) PreScore(arg0 context.Context, arg1 *framework.CycleState, arg2 *v1.Pod, arg3 []*framework.NodeInfo) *framework.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreScore", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*framework.Status)
	return ret0
}

// PreScore indicates an expected call of PreScore.
func (mr *MockPreScorePluginMockRecorder) PreScore(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreScore", reflect.TypeOf((*MockPreScorePlugin)(nil).PreScore), arg0, arg1, arg2, arg3)
}

// MockScorePlugin is a mock of ScorePlugin interface.
type MockScorePlugin struct {
	ctrl     *gomock.Controller
	recorder *MockScorePluginMockRecorder
}

// MockScorePluginMockRecorder is the mock recorder for MockScorePlugin.
type MockScorePluginMockRecorder struct {
	mock *MockScorePlugin
}

// NewMockScorePlugin creates a new mock instance.
func NewMockScorePlugin(ctrl *gomock.Controller) *MockScorePlugin {
	mock := &MockScorePlugin{ctrl: ctrl}
	mock.recorder = &MockScorePluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScorePlugin) EXPECT() *MockScorePluginMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockScorePlugin) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockScorePluginMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockScorePlugin)(nil).Name))
}

// Score mocks base method.
func (m *MockScorePlugin) Score(arg0 context.Context, arg1 *framework.CycleState, arg2 *v1.Pod, arg3 string) (int64, *framework.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Score", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*framework.Status)
	return ret0, ret1
}

// Score indicates an expected call of Score.
func (mr *MockScorePluginMockRecorder) Score(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Score", reflect.TypeOf((*MockScorePlugin)(nil).Score), arg0, arg1, arg2, arg3)
}

// ScoreExtensions mocks base method.
func (m *MockScorePlugin) ScoreExtensions() framework.ScoreExtensions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScoreExtensions")
	ret0, _ := ret[0].(framework.ScoreExtensions)
	return ret0
}

// ScoreExtensions indicates an expected call of ScoreExtensions.
func (mr *MockScorePluginMockRecorder) ScoreExtensions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScoreExtensions", reflect.TypeOf((*MockScorePlugin)(nil).ScoreExtensions))
}

// MockScoreExtensions is a mock of ScoreExtensions interface.
type MockScoreExtensions struct {
	ctrl     *gomock.Controller
	recorder *MockScoreExtensionsMockRecorder
}

// MockScoreExtensionsMockRecorder is the mock recorder for MockScoreExtensions.
type MockScoreExtensionsMockRecorder struct {
	mock *MockScoreExtensions
}

// NewMockScoreExtensions creates a new mock instance.
func NewMockScoreExtensions(ctrl *gomock.Controller) *MockScoreExtensions {
	mock := &MockScoreExtensions{ctrl: ctrl}
	mock.recorder = &MockScoreExtensionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoreExtensions) EXPECT() *MockScoreExtensionsMockRecorder {
	return m.recorder
}

// NormalizeScore mocks base method.
func (m *MockScoreExtensions) NormalizeScore(arg0 context.Context, arg1 *framework.CycleState, arg2 *v1.Pod, arg3 framework.NodeScoreList) *framework.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NormalizeScore", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*framework.Status)
	return ret0
}

// NormalizeScore indicates an expected call of NormalizeScore.
func (mr *MockScoreExtensionsMockRecorder) NormalizeScore(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NormalizeScore", reflect.TypeOf((*MockScoreExtensions)(nil).NormalizeScore), arg0, arg1, arg2, arg3)
}

// MockPermitPlugin is a mock of PermitPlugin interface.
type MockPermitPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPermitPluginMockRecorder
}

// MockPermitPluginMockRecorder is the mock recorder for MockPermitPlugin.
type MockPermitPluginMockRecorder struct {
	mock *MockPermitPlugin
}

// NewMockPermitPlugin creates a new mock instance.
func NewMockPermitPlugin(ctrl *gomock.Controller) *MockPermitPlugin {
	mock := &MockPermitPlugin{ctrl: ctrl}
	mock.recorder = &MockPermitPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermitPlugin) EXPECT() *MockPermitPluginMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockPermitPlugin) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockPermitPluginMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPermitPlugin)(nil).Name))
}

// Permit mocks base method.
func (m *MockPermitPlugin) Permit(arg0 context.Context, arg1 *framework.CycleState, arg2 *v1.Pod, arg3 string) (*framework.Status, time.Duration) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Permit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*framework.Status)
	ret1, _ := ret[1].(time.Duration)
	return ret0, ret1
}

// Permit indicates an expected call of Permit.
func (mr *MockPermitPluginMockRecorder) Permit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Permit", reflect.TypeOf((*MockPermitPlugin)(nil).Permit), arg0, arg1, arg2, arg3)
}

// MockBindPlugin is a mock of BindPlugin interface.
type MockBindPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockBindPluginMockRecorder
}

// MockBindPluginMockRecorder is the mock recorder for MockBindPlugin.
type MockBindPluginMockRecorder struct {
	mock *MockBindPlugin
}

// NewMockBindPlugin creates a new mock instance.
func NewMockBindPlugin(ctrl *gomock.Controller) *MockBindPlugin {
	mock := &MockBindPlugin{ctrl: ctrl}
	mock.recorder = &MockBindPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBindPlugin) EXPECT() *MockBindPluginMockRecorder {
	return m.recorder
}

// Bind mocks base method.
func (m *MockBindPlugin) Bind(arg0 context.Context, arg1 *framework.CycleState, arg2 *v1.Pod, arg3 string) *framework.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*framework.Status)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockBindPluginMockRecorder) Bind(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockBindPlugin)(nil).Bind), arg0, arg1, arg2, arg3)
}

// Name mocks base method.
func (m *MockBindPlugin) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockBindPluginMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockBindPlugin)(nil).Name))
}

// MockPreBindPlugin is a mock of PreBindPlugin interface.
type MockPreBindPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPreBindPluginMockRecorder
}

// MockPreBindPluginMockRecorder is the mock recorder for MockPreBindPlugin.
type MockPreBindPluginMockRecorder struct {
	mock *MockPreBindPlugin
}

// NewMockPreBindPlugin creates a new mock instance.
func NewMockPreBindPlugin(ctrl *gomock.Controller) *MockPreBindPlugin {
	mock := &MockPreBindPlugin{ctrl: ctrl}
	mock.recorder = &MockPreBindPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPreBindPlugin) EXPECT() *MockPreBindPluginMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockPreBindPlugin) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockPreBindPluginMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPreBindPlugin)(nil).Name))
}

// PreBind mocks base method.
func (m *MockPreBindPlugin) PreBind(arg0 context.Context, arg1 *framework.CycleState, arg2 *v1.Pod, arg3 string) *framework.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreBind", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*framework.Status)
	return ret0
}

// PreBind indicates an expected call of PreBind.
func (mr *MockPreBindPluginMockRecorder) PreBind(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreBind", reflect.TypeOf((*MockPreBindPlugin)(nil).PreBind), arg0, arg1, arg2, arg3)
}

// MockPostBindPlugin is a mock of PostBindPlugin interface.
type MockPostBindPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPostBindPluginMockRecorder
}

// MockPostBindPluginMockRecorder is the mock recorder for MockPostBindPlugin.
type MockPostBindPluginMockRecorder struct {
	mock *MockPostBindPlugin
}

// NewMockPostBindPlugin creates a new mock instance.
func NewMockPostBindPlugin(ctrl *gomock.Controller) *MockPostBindPlugin {
	mock := &MockPostBindPlugin{ctrl: ctrl}
	mock.recorder = &MockPostBindPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostBindPlugin) EXPECT() *MockPostBindPluginMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockPostBindPlugin) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockPostBindPluginMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPostBindPlugin)(nil).Name))
}

// PostBind mocks base method.
func (m *MockPostBindPlugin) PostBind(arg0 context.Context, arg1 *framework.CycleState, arg2 *v1.Pod, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostBind", arg0, arg1, arg2, arg3)
}

// PostBind indicates an expected call of PostBind.
func (mr *MockPostBindPluginMockRecorder) PostBind(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBind", reflect.TypeOf((*MockPostBindPlugin)(nil).PostBind), arg0, arg1, arg2, arg3)
}

// MockReservePlugin is a mock of ReservePlugin interface.
type MockReservePlugin struct {
	ctrl     *gomock.Controller
	recorder *MockReservePluginMockRecorder
}

// MockReservePluginMockRecorder is the mock recorder for MockReservePlugin.
type MockReservePluginMockRecorder struct {
	mock *MockReservePlugin
}

// NewMockReservePlugin creates a new mock instance.
func NewMockReservePlugin(ctrl *gomock.Controller) *MockReservePlugin {
	mock := &MockReservePlugin{ctrl: ctrl}
	mock.recorder = &MockReservePluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservePlugin) EXPECT() *MockReservePluginMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockReservePlugin) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockReservePluginMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockReservePlugin)(nil).Name))
}

// Reserve mocks base method.
func (m *MockReservePlugin) Reserve(arg0 context.Context, arg1 *framework.CycleState, arg2 *v1.Pod, arg3 string) *framework.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reserve", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*framework.Status)
	return ret0
}

// Reserve indicates an expected call of Reserve.
func (mr *MockReservePluginMockRecorder) Reserve(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reserve", reflect.TypeOf((*MockReservePlugin)(nil).Reserve), arg0, arg1, arg2, arg3)
}

// Unreserve mocks base method.
func (m *MockReservePlugin) Unreserve(arg0 context.Context, arg1 *framework.CycleState, arg2 *v1.Pod, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unreserve", arg0, arg1, arg2, arg3)
}

// Unreserve indicates an expected call of Unreserve.
func (mr *MockReservePluginMockRecorder) Unreserve(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unreserve", reflect.TypeOf((*MockReservePlugin)(nil).Unreserve), arg0, arg1, arg2, arg3)
}
