// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/kube-scheduler-simulator/simulator/clusterresourceimporter (interfaces: ReplicateService)

// Package mock_clusterresourceimporter is a generated GoMock package.
package mock_clusterresourceimporter

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	snapshot "sigs.k8s.io/kube-scheduler-simulator/simulator/snapshot"
)

// MockReplicateService is a mock of ReplicateService interface.
type MockReplicateService struct {
	ctrl     *gomock.Controller
	recorder *MockReplicateServiceMockRecorder
}

// MockReplicateServiceMockRecorder is the mock recorder for MockReplicateService.
type MockReplicateServiceMockRecorder struct {
	mock *MockReplicateService
}

// NewMockReplicateService creates a new mock instance.
func NewMockReplicateService(ctrl *gomock.Controller) *MockReplicateService {
	mock := &MockReplicateService{ctrl: ctrl}
	mock.recorder = &MockReplicateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReplicateService) EXPECT() *MockReplicateServiceMockRecorder {
	return m.recorder
}

// IgnoreErr mocks base method.
func (m *MockReplicateService) IgnoreErr() snapshot.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgnoreErr")
	ret0, _ := ret[0].(snapshot.Option)
	return ret0
}

// IgnoreErr indicates an expected call of IgnoreErr.
func (mr *MockReplicateServiceMockRecorder) IgnoreErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgnoreErr", reflect.TypeOf((*MockReplicateService)(nil).IgnoreErr))
}

// IgnoreSchedulerConfiguration mocks base method.
func (m *MockReplicateService) IgnoreSchedulerConfiguration() snapshot.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgnoreSchedulerConfiguration")
	ret0, _ := ret[0].(snapshot.Option)
	return ret0
}

// IgnoreSchedulerConfiguration indicates an expected call of IgnoreSchedulerConfiguration.
func (mr *MockReplicateServiceMockRecorder) IgnoreSchedulerConfiguration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgnoreSchedulerConfiguration", reflect.TypeOf((*MockReplicateService)(nil).IgnoreSchedulerConfiguration))
}

// Load mocks base method.
func (m *MockReplicateService) Load(arg0 context.Context, arg1 *snapshot.ResourcesForLoad, arg2 ...snapshot.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Load", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockReplicateServiceMockRecorder) Load(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockReplicateService)(nil).Load), varargs...)
}

// Snap mocks base method.
func (m *MockReplicateService) Snap(arg0 context.Context, arg1 ...snapshot.Option) (*snapshot.ResourcesForSnap, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Snap", varargs...)
	ret0, _ := ret[0].(*snapshot.ResourcesForSnap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Snap indicates an expected call of Snap.
func (mr *MockReplicateServiceMockRecorder) Snap(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snap", reflect.TypeOf((*MockReplicateService)(nil).Snap), varargs...)
}
