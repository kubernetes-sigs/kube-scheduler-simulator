// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubernetes-sigs/kube-scheduler-simulator/reset (interfaces: NodeService,PersistentVolumeService,PersistentVolumeClaimService,StorageClassService,PriorityClassService,SchedulerService)

// Package mock_reset is a generated GoMock package.
package mock_reset

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockNodeService is a mock of NodeService interface.
type MockNodeService struct {
	ctrl     *gomock.Controller
	recorder *MockNodeServiceMockRecorder
}

// MockNodeServiceMockRecorder is the mock recorder for MockNodeService.
type MockNodeServiceMockRecorder struct {
	mock *MockNodeService
}

// NewMockNodeService creates a new mock instance.
func NewMockNodeService(ctrl *gomock.Controller) *MockNodeService {
	mock := &MockNodeService{ctrl: ctrl}
	mock.recorder = &MockNodeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeService) EXPECT() *MockNodeServiceMockRecorder {
	return m.recorder
}

// DeleteCollection mocks base method.
func (m *MockNodeService) DeleteCollection(arg0 context.Context, arg1 v1.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockNodeServiceMockRecorder) DeleteCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockNodeService)(nil).DeleteCollection), arg0, arg1)
}

// MockPersistentVolumeService is a mock of PersistentVolumeService interface.
type MockPersistentVolumeService struct {
	ctrl     *gomock.Controller
	recorder *MockPersistentVolumeServiceMockRecorder
}

// MockPersistentVolumeServiceMockRecorder is the mock recorder for MockPersistentVolumeService.
type MockPersistentVolumeServiceMockRecorder struct {
	mock *MockPersistentVolumeService
}

// NewMockPersistentVolumeService creates a new mock instance.
func NewMockPersistentVolumeService(ctrl *gomock.Controller) *MockPersistentVolumeService {
	mock := &MockPersistentVolumeService{ctrl: ctrl}
	mock.recorder = &MockPersistentVolumeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersistentVolumeService) EXPECT() *MockPersistentVolumeServiceMockRecorder {
	return m.recorder
}

// DeleteCollection mocks base method.
func (m *MockPersistentVolumeService) DeleteCollection(arg0 context.Context, arg1 v1.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockPersistentVolumeServiceMockRecorder) DeleteCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockPersistentVolumeService)(nil).DeleteCollection), arg0, arg1)
}

// MockPersistentVolumeClaimService is a mock of PersistentVolumeClaimService interface.
type MockPersistentVolumeClaimService struct {
	ctrl     *gomock.Controller
	recorder *MockPersistentVolumeClaimServiceMockRecorder
}

// MockPersistentVolumeClaimServiceMockRecorder is the mock recorder for MockPersistentVolumeClaimService.
type MockPersistentVolumeClaimServiceMockRecorder struct {
	mock *MockPersistentVolumeClaimService
}

// NewMockPersistentVolumeClaimService creates a new mock instance.
func NewMockPersistentVolumeClaimService(ctrl *gomock.Controller) *MockPersistentVolumeClaimService {
	mock := &MockPersistentVolumeClaimService{ctrl: ctrl}
	mock.recorder = &MockPersistentVolumeClaimServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersistentVolumeClaimService) EXPECT() *MockPersistentVolumeClaimServiceMockRecorder {
	return m.recorder
}

// DeleteCollection mocks base method.
func (m *MockPersistentVolumeClaimService) DeleteCollection(arg0 context.Context, arg1 v1.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockPersistentVolumeClaimServiceMockRecorder) DeleteCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockPersistentVolumeClaimService)(nil).DeleteCollection), arg0, arg1)
}

// MockStorageClassService is a mock of StorageClassService interface.
type MockStorageClassService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageClassServiceMockRecorder
}

// MockStorageClassServiceMockRecorder is the mock recorder for MockStorageClassService.
type MockStorageClassServiceMockRecorder struct {
	mock *MockStorageClassService
}

// NewMockStorageClassService creates a new mock instance.
func NewMockStorageClassService(ctrl *gomock.Controller) *MockStorageClassService {
	mock := &MockStorageClassService{ctrl: ctrl}
	mock.recorder = &MockStorageClassServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageClassService) EXPECT() *MockStorageClassServiceMockRecorder {
	return m.recorder
}

// DeleteCollection mocks base method.
func (m *MockStorageClassService) DeleteCollection(arg0 context.Context, arg1 v1.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockStorageClassServiceMockRecorder) DeleteCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockStorageClassService)(nil).DeleteCollection), arg0, arg1)
}

// MockPriorityClassService is a mock of PriorityClassService interface.
type MockPriorityClassService struct {
	ctrl     *gomock.Controller
	recorder *MockPriorityClassServiceMockRecorder
}

// MockPriorityClassServiceMockRecorder is the mock recorder for MockPriorityClassService.
type MockPriorityClassServiceMockRecorder struct {
	mock *MockPriorityClassService
}

// NewMockPriorityClassService creates a new mock instance.
func NewMockPriorityClassService(ctrl *gomock.Controller) *MockPriorityClassService {
	mock := &MockPriorityClassService{ctrl: ctrl}
	mock.recorder = &MockPriorityClassServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPriorityClassService) EXPECT() *MockPriorityClassServiceMockRecorder {
	return m.recorder
}

// DeleteCollection mocks base method.
func (m *MockPriorityClassService) DeleteCollection(arg0 context.Context, arg1 v1.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockPriorityClassServiceMockRecorder) DeleteCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockPriorityClassService)(nil).DeleteCollection), arg0, arg1)
}

// MockSchedulerService is a mock of SchedulerService interface.
type MockSchedulerService struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerServiceMockRecorder
}

// MockSchedulerServiceMockRecorder is the mock recorder for MockSchedulerService.
type MockSchedulerServiceMockRecorder struct {
	mock *MockSchedulerService
}

// NewMockSchedulerService creates a new mock instance.
func NewMockSchedulerService(ctrl *gomock.Controller) *MockSchedulerService {
	mock := &MockSchedulerService{ctrl: ctrl}
	mock.recorder = &MockSchedulerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulerService) EXPECT() *MockSchedulerServiceMockRecorder {
	return m.recorder
}

// ResetScheduler mocks base method.
func (m *MockSchedulerService) ResetScheduler() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetScheduler")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetScheduler indicates an expected call of ResetScheduler.
func (mr *MockSchedulerServiceMockRecorder) ResetScheduler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetScheduler", reflect.TypeOf((*MockSchedulerService)(nil).ResetScheduler))
}
